h1: C#

Essa biblioteca em c# permite utilizar a plataforma B-datum com a plataforma .net

h2: Como instalar?

Você pode fazer o download do codigo fonte da biblioteca diretamente do github:

	git clone https://github.com/b-datum/b-datum-dotnet.git

Ou utilizar uma das versões abaixo:

	https://github.com/b-datum/b-datum-dotnet/archive/master.zip

O github também fornece um cliente proprio para download do codigo fonte especialmente feito para usuarios windows, nele é possivel fazer o download do codigo e manter atualizado com a versão atual mais facilmente.

	http://windows.github.com/

Depois de instalar, basta apenas adicionar o repositorio do b-datum, e clonar o repositorio b-datum-dotnet.

h2: Pré Requisitos

Depois disso basta voce adicionar o projeto bdatum a sua solução no visual studio. É necessario usar o .net 4.0 ou superior. Se o visual studio após você adicionar o projeto a sua solução não adicionar as referencias, você ira precisar adicionar as referencias do projeto na solução.

Também será necessario a biblioteca json.net. Ela está disponivel em: http://json.codeplex.com.  O jeito mais pratico é instalar direto utilizando NuGet:

	<code>
	PM> Install-Package Newtonsoft.Json
	</code>

h2: Utilizando:

Para utilizar a biblioteca é necessario que voce tenha as credenciais para fazer o backup. Elas são a chave de organização e as chaves de ponto. 

Sua chave de organização é obtida no momento do cadastro. Sua chave de ponto pode ser obtida cadastrando na interface web um novo ponto, ou sistematicamente utilizando a api.

A biblioteca é composta de 3 classes que lhe permite interagir com o b-datum

	- b_datum : Representa sua organização, o objeto criado a partir dessa classe ira conter os dados da sua organizao e é capaz de criar novos pontos sistematicamente.
	- b_node:   Representa um ponto. Ele contem a chave de ponto ( node_key ) e quando criado a partir de uma organização, ele pode ser ativado. É atravéz dele que poderemos fazer upload, download e as operações de backup.
	- FileObjectList:  Representa uma lista de arquivos disponiveis no servidor.


h2: Utilização:

	Após adicionar em sua solução no visual studio, cria-se um novo objeto b_datum que representa sua organização:

	Adicionando a biblioteca no namespace:
	<code>
	using bdatum;
	</code>

	Instanciando uma nova organização:	
	<code>
	b_datum organizacao = new b_datum();
        organization.api_key = "api_key";
        organization.partner_key = "partner_key";
        organization.user_name = "usuario@email.com";
	organization.organization_id = "49";
	</code>

	Para criação de novos nós, é necessario passar o email e o numero da organização para o objeto b_datum criado.

	Agora é possivel criar um novo ponto a partir de sua organização:
	<code>
	b_node node = server.add_node();	
	</code>

	Esse node irá conter a chave de ativação e todos os dados de credenciais. Note é necessario ativar o ponto posteriormente.
	<code>
	node.activate();
	</code>

	O nó ativo irá conter sua chave de ponto:
	<code>
	string nodekey = node.node_key;
	</code>

	
h3: Manipulação de Arquivos:

	h4: Upload

	Para enviar um arquivo, basta perdir ao node para fazer o upload do arquivo pelo seu path completo em disco:
	
	<code>
	string status = node.upload( "nomedoarquivo", "c:\arquivo.ext" );
	</code>

	Note que o status é verdadeiro ou falso conforme o sucesso da operação. É possivel enviar quantos arquivos forem necessarios. 
	
	
	h4: Download

	Para fazer o download do arquivo, basta chamar a função de download, com o nome completo do arquivo no servidor.
	No caso para o exemplo acima, seria possivel fazer o download como:

	<code>
	string status = node.download( "nomedoarquivo", "c:\arquivo.ext" );	
	</code>	

	Ele irá fazer o download do arquivo disponivel em \dos\antigo\himen.sys para a raiz do disco no computador.
	Note que ele irá sobrescrever se o arquivo já existir em disco.

	È possivel recuperar uma versão em especifico do arquivo:
	<code>
	string status  = node.download( "nomedoarquivo", "c:\arquivo.ext", 7 );
	</code>

	Nesse caso ele irá fazer o download da versão 7 do arquivo disponivel no servidor.

	h4: Listar os arquivos disponiveis

	Para listar os arquivos disponiveis basta chamar list. Ele retorna um objeto do tipo FileObjectList. Para percorrer todos os elementos deve-se carregar em uma lista o resultado do metodo objects.

	<code>
	FileObjectList root = node.list();


        foreach (FileObject file in root.objects)
        {
        	items.Add(new TreeItem(file.name, 0));
        	treeView1.Nodes.Add(file.name);
        }


	</code>

	No exemplo acima, temos uma lista de arquivos carregada em um componente tree view de uma interface grafica.

		
	h4: Apagar um arquivo

	Para apagar um arquivo, basta chamar delete, com o path completo no servidor:

	<code>
	bool status = node.delete("\dos\antigo\himen.sys");
	</code>


h3: Extras

	Dentro do mesmo repositorio no git-hub, temos uma pequena aplicação windows, chamada exemmplo_app. Ela é um projeto do visual studio com 
uma interface simples com botões para as principais funções disponíveis na api. Pode-se utiliza-la para testes ou para começar uma aplicação como modelo.
É só preencher as credenciais dentro do Form1.cs e utilizar!




	



	
